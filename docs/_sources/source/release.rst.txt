Substance3d Release Notes
=========================

1.4.0 (2025/09/23)
------------------

Added
+++++
- [Mesh Processing] New **mesh_processing** API module for mesh operations.
- [Mesh Processing] New mesh processing operators (Decimation, Remeshing, Unwrap, Repack, ...)
- [Mesh Processing] New function to process a chain of operators, `mesh_processing.process()`
- [USDView] USDView with file format plugins support is now available
- [USDView][Plugins] Simplified behavior to **add USDView plugins**.
- [USDView][Plugins] Add USDView plugins into `$substance3d/ssca_usdview_plugins`
- [USDView][Plugins] Add USDView plugins into a directory defined by **SBS3D_USDVIEW_PLUGINS_PATH** environment variable.
- [USDView][Plugins] Default USDView plugins are available (Camera creation, Variant finder, ...)
- [Transform] New functions to set pivot transform, `transform.set_scale_pivot()`, `transform.set_rotate_pivot()`
- [Transform] New functions to get pivot transform, `transform.get_scale_pivot()`, `transform.get_rotate_pivot()`
- [Material] New function to create a material from reference `material.create_from_reference()`.
- [Material] New function to switch the material **output surface**, `material.change_output_surface()`
- [Material] New function to change the **normal** format, `material.set_normal_format()`
- [Material] Texture file parameters now support **Path** objects as input.
- [Image] `image.normalize()` can choose which **channels** to normalize.
- [Scene] New function to **demote a local object** to a local reference.
- [Scene] Option to **search in display name** metadata.
- [Renderer] When a `time_limit` is reached, the renderer issues **finishRendering** (denoiser, postprocess...) to finalize the frame.
- [Documentation] Added **Stats module API** docs and updated IDE setup and installation guides.

Improvements
++++++++++++
- [Stats][Performance] Speed up statistics collection

Fixed
+++++
- [Material] Fixed failure to **create SBSAR** when the `.sbsar` file is next to (or above) a **USDZ**-loaded file.
- [Material] Fixed **unintended empty reference** added by SBSAR materials in certain cases.
- [Material] Removed the **cache limit** for the SBSAR material creation.
- [Renderer] Fixed **Normal AOVs render pass** naming/typo to ensure correct output.
- [Camera][Transform] Fixed **bounding box** and **camera framing** behavior for **animated transforms**.
- [Variant] Corrected `ReferenceList.clear()` behavior inside a **variant**.

Known issues
++++++++++++
- [USDView] USDView crashes when initializing Eclair

1.3.1 (April, 17 2025)
+++++++++++++++++++++++

Fixed
-----
* [Documentation] Update and fixes


1.3.0 (March, 25th 2025)
++++++++++++++++++++++++

Added
-----
* [Global] Support for `DisplayName` on PrimHandlers
* [Scene] New function to flatten references as local in the current stage `scene.flatten_references()`
* [Renderer] Add Eclair AOVs and default AOVs for HydraRenderer `renderer.passes.ShaderAOVs`
* [Renderer] new `renderer.passes.SCENE_ID` to get a combined buffer with primId, instanceId and subsetId, everything as uint32
* [Renderer] `default_light` argument is set to `None` by defaut in `renderer.render()` to use the scene lights if exist or the default light as a backup
* [Image] New function to add a metadata dictionnary to a buffer `image.add_metadata(buffer, metadata_dict)` 
* [Image] New function to get a metadata dictionnary from a buffer `image.metadata(buffer)`
* [Assets] Rename `example_assets` folder to `resources`
* [Assets] New resource - Nuke Gizmo plugin to easily create mask in Nuke from the `renderer.passes.SCENE_ID` pass
* [Utility] New function to get GPU information `substance3d.api.GPUSettings().print_info()`
* [Utility] New function to set GPU device `substance3d.api.GPUSettings().index = 1`
Fixed
-----
* [Variant] Allows to render within a variant block
* [Variant] Properly create several variant sets 
* [Material] Material creation now handles absolute path starting at the stage's defaultPrim path
* [Camera] Fixed an issue with orienting a camera along a specific direction colinear to the up axis
* [Light] The USD distant light now comes from +Z instead of -Z, consistent with other renderers.


1.2.0 (December, 3rd 2024)
+++++++++++++++++++++++

Breaking Changes
----------
* [Scene] New default prim behavior. When a new scene is created `scene.new()` a default Xform prim named `root` is created. This new behavior doesnt change any API signatures. If a scene is loaded without a valid defaultPrim, errors will be raised by some API functions. Check the documentation for more information `Getting started - Create and build a scene`
* [Material] With this new behavior, materials are created by default under `/{defaultPrim}/materials/...` instead of `/materials/...`

Added
-----
* [Scene] Add depth option when printing the scene tree with `scene.tree(depth=2)`
* [Material] New function `set_input` to set or change the value of a material input
* [Material] New function `create_shadow_catcher` to create a material shadow catcher
* [Material] New function `upgrade_with_new_definition` to upgrade a UsdPreviewSurface material to a ASM material
* [Material] Enable 8192px resolution option for `create_from_sbsar` function
* [Camera] New function `set_backplate` to set a backplate image to a camera
* [Renderer] Denoiser support on Linux with Nvidia GPU. Check the documentation for configuration `Introduction - How to install and configure SSCA - Linux with Nvidia GPU`
* [Image] `normalize` function supports int32 and int64 image types
Fixed
-----
* [Scene] Fix scale to the scene unit option
* [Material] More robust usage detection in texture files
* [Render] Render progress logs are now displayed in the console
* [Stats] Fix stats collection when there is no mesh in the scene
* [Utility] Fix BBOX calculations when the scene has no mesh
* [Camera] Fix camera framing when the scene has no mesh

Experimental
------------
* [Light] New function `dome_from_match_image` to generate a dome light from an image
* [Image] New function `panorama_from_image` to generate an HDR panorama from an image


1.1.0 (July, 23th 2024)
+++++++++++++++++++++++

API Breaks
----------
* [Renderer] Full support of stage's RenderSettings (check Documentation - User Manual - Next steps - Render settings)
* [Renderer] `Renderer.device` enum is renamed in `Renderer.RenderTechnique` to match RenderSettings terminology
* Revamp how to get and set Attribute Handlers (check Documentation - User Manual - How to use Handlers)

Added
-----
* [Scene] New way to get an object with index or path `my_scn.objects.get(index or path)` `my_scn.objects.[index or path]`
* [Stats] New module `stats` (check Documentation - User Manual - Statistics Collectors)
* [Stats] Collect stats using predefined collectors
* [Stats] Collect stats using your custom collectors
* [Info] New module `info` `from substance3d import info`
* [Info] Get version info of all tech `info.all_versions`
* [Material] In `material.create_from_sbsar` add argument to choose `material_definitions` with ASM and UsdSurfacePreview as default (enum `material.Definitions`)
* [Material] In `material.create_from_sbsar` add argument `graph_identifier` to select a specific graph
* [Material] New function `material.bake_connections` to replace attribute connections by values
* [Primitive] Create a sphere with UV `primitive.sphere`
* [Primitive] Create a cyclorama `primitive.cyclo`
* [Renderer] New default IBL
* [Renderer] New default resolution (1024, 1024) and default samples (200)
* [Transform] New function to move an object to the ground `transform.move_to_ground`
* [Transform] New function to move an object to the scene origin `transform.move_to_origin`
* [Transform] New function to align along an axis a list of objects `transform.align_objects`
* [Transform] New function to distribute a list of objects between 2 points `transform.distribute_objects`
* [Camera] New function `camera.traveling` to move a camera towards the subject
* [Image] New function to invert channel of an image`image.invert_channel`
* [Utility] New function to remove isolated vertices `utility.mesh_processing.remove_isolated_vertices`
* [Global] Uniform path references in USD as posix
* [Global][Linux] Use Vulkan Substance Engine by default

Fixed
-----
* [Scene] add_reference with selected objects can support fileformat plugin options
* [Renderer] Fix white diffuse AOV
* [Material] Revert to last UV scale edition when physical size compute fails
* [Material] In `material.set_sbsar_parameter` parameter value of an input image supports Path
* [Image] [Renderer] Fix colorspace issue when compositing a render with an image background
* [Camera] Camera is now created when framed on an empty scene
* [Export] All functions now work with relative destination path

Experimental
------------
* [Camera] New function `match_perspective`. Contact Adobe for more information


1.0.0 - beta1 (March, 21th 2024)
++++++++++++++++++++++++++++++++

Added
-----
* [Material] SBSAR Material support input image parameter
* [Material] New `create_from_mtlx` function to create a material from a MaterialX file. 
* [Material] Add support for uniform values of Adobe Standard Material definition when using `create_from_sbsar`
* [Material] New `get_assigned_material` function to return the material of a given object
* [Material] `set_sbsar_preset` function accepts preset name with space
* [Camera] Easily get and set camera properties with `camera.update_properties` and `camera.properties`
* [Light] Easily get and set light properties with `light.update_properties` and `light.properties`
* [Render] New realtime render `RenderDevice.RASTERIZER`
* [Render] On Linux, enable GPU rendering with CPU denoising
* [Export] New `abc` function to export alembic files (experimental)
* [Utility] Get object measurement with `utility.bbox_info`

Fixed
-----
* [Global] Better management of Z-axis scenes (camera creation, ground plane,...)
* [Material] Correct support of UsdPreviewSurface for all created materials
* [Material] Correct `sourceColorSpace` according to input type
* [Export] Fix crash when exporting scene with SBSAR material as variants
* [Export] Fix crash with non-usd exports when scene has SBSAR materials
* [Scene] Given file path are now checked with asset path resolver
* [Plugins] Numerous minor fix for plugin formats

1.0.0 - beta0 (January, 15th 2024)
++++++++++++++++++++++++++++++++++

Added
-----
* [Global] Add pathlib support
* [Global] Linux package is a tar.gz
* [Scene] New argument in `scene.add_reference()` to adjust the orientation of the reference based on the scene orientation
* [Material] `material.create_solid_color()` creates material inputs
* [Image] Get a `numpy` array from `Image` buffer with `image.get_numpy_array()`
* [Image] Handle sRGB and linear image conversion when saving buffer
* [Camera] Frame a camera to a given bounding box with `camera.frame()`

Fixed
-----
* [Package] Fix Substance Engine loading on MacOS
* [Material] Fix error when assigning a Substance material with no physical size
* [Material] Error when creating Substance materials with text parameters
* [Material] `material.create_from_sbsar()` doesn't use the default preset
* [Material] Name collision when creating Substance materials with same file
* [Export] `export.archive()` breaks material modifications
* [Export] `export.archive()` modifies the original stage when baking Substance materials
* [Render] Crash when rendering several presets of a Substance material coming from a template scene
* [Plugins] Numerous minor fix for plugin formats


0.12.0 (November, 15th 2023)
++++++++++++++++++++++++++++

Added
-----
* [Scene] Add support for USD collections with `scene.collections`
* [Renderer] Save your render passes as a multipart EXR
* [Material] Add new `type` argument in `material.get_sbsar_parameters()` to filter parameters by type
* [Export] Improved performance of the USDZ archive export
* [Platform] `PXR_DISABLED_PLUGIN_NAMES` environment variable to disable plugins
* [Platform] Add HdStorm to `PXR_DISABLED_PLUGIN_NAMES` removing the last OpenGL dependency
* [Utility] BBOX computation, more precise but less performant `utility.calculate_bbox(..., use_precise_mesh_bbox=True)`

Fixed
-----
* [Scene] Error when add reference/layer relative file path
* [Scene] Set scene's metadata doesn't udpate SSCA data if a value already exists
* [Material] Crash when setting float1 value parameter with `material.set_sbsar_parameter()`
* [Export] Numerous fixes in the USDZ archive export
* [Plugins] Load obj files without .mtl
* [Plugins] Numerous minor fix for plugin formats

0.11.0 (September, 21st 2023)
++++++++++++++++++++++++++++
* New function `material.get_sbsar_parameters` to get all parameters and their properties of a SBSAR file
* New function `material.set_sbsar_parameter` to easily set a new value of a given SBSAR parameter
* Send a warning when setting a value out of the range of a SBSAR parameter
* You can use the `environment_background` and the `groundplane` at the same time to render your scene
* Fix: device selection (CPU, GPU) when initializing the renderer
* Fix: backgroundColor settings and denoiser are now compatible
* Fix: When using `export.glb` and `export.gltf`, it now activates by default all glb/gltf material extensions

0.10.0 (September, 18th 2023)
++++++++++++++++++++++++++++
* `renderer.render` has a new argument `denoiser` to automatically denoise renders `renderer.render(..., denoise=True)`
* Matching parity of GLB support between SSCA and Stager
* `camera.frame` now keeps the camera properties
* New `camera.Views` and `camera.create_view` to create easily specific cameras (top, bottom, left, right,...) `camera.create_view(parent, 'cam_top', camera.Views.TOP)`
* Orthographic camera support `camera.create(..., orthographic=True)`
* :warning: API changes : `material.create_from_sbsar` takes the SBSAR name as material name by default
    The old position argument `name` is now a keyword argument -- old calls will failed without update
* Read render resolution from USD stage via RenderSettings.resolution or RenderProducts.resolution
* Add arguments to define dimensions properties of each light type
* Export with sbsar baking can preserve the unflatten scene
* Export with sbsar baking preserve the material preset selections
* Variant edition outside its scope will raise an error
* Support background color settings from Stager USD export
* GeomSubset support
* Numerous minor fixes

0.9.0 (August, 3rd 2023)
++++++++++++++++++++
* New function to set a groundplane for rendering `render.set_groundplane()`
* `renderer.render` has a new argument `passes` to render a list of passes
* :warning: API changes : `renderer.render` `aov` `update_cam_aspect_ratio` arguments are removed
* New `scene.animation` module to create animations for a specific timecode
* Add `image.normalize` function to normalize an image between 0-1
* glTF, GLB import supports new extensions
* New `image.save_animated_gif()` function to save animated gif
* Numerous minor fixes


0.8.0 (June 27th 2023)
++++++++++++++++++++++
* Keyframe animation support
* Physical size support for material assignment
* Support for writing out AOV's to the best format
* Use render Eclair's delegate settings instead of environment variables
* `renderer.render` has a new argument `time_limit` to stop the render's convergence when it reachs this limit
* `renderer.render` has a new argument `thread_limit` to limit thread number for this rendering
* :warning: API changes : `renderer.init`'s `samples and environment_background` arguments are moved to `renderer.render()`
* Improve performance with a PrimHandler cache
* `image`'s functions signature change from roi tuple of four to a resolution tuple of two
* `renderer.render()`'s `background_image` argument can now be an Image object
* New PrimHandler property `Primhandler.parent` to get the parent PrimHandler or None if it's a root
* New arguments export parameters for gltf/glb format
* New function to export flatten scene with dependencies `export.scene_with_dependencies()`

0.7.0 (May 30th 2023)
+++++++++++++++++++++
* Added option to preserve camera orientation when framing
  the scene
* Rendering scene for a specific frame/timecode. `renderer.render(my_scn, timecode=10)`
* StageHandler has now a time range property to iter through timeline: `my_scn.time_range`
* Improve USDZ export.
* New `export.scene_with_dependencies` function to export a scene with all its dependencies in a given directory.
* Export glb and gltf have now option `embed_images` to encode textures as base64 into the gltf. `export.glb(my_scn, 'output.glb', embed_images=True)`
* Better filename management for export functions, add missing extension and raise error if the filename is invalid.
* And numerous improvements for plugins and Eclair renderer
* Numerous minor fixes


0.6.0 (May 2nd 2023)
++++++++++++++++++++
* Renamed package from substance3d-automation to substance3d_scene_automation
* Fixed issue with transform.clear
* Fixed issue related to automatic framing of camera
* Added support for getting physical size from sbsar's
* And numerous improvements for plugins and Eclair renderer


0.5.0 (April 14th 2023)
+++++++++++++++++++++++
* Eclair CPU is now the default renderer
* Fixed issues for material creation
* Create docker image with Eclair GPU support
* Support for textures with multiple usages and single channel
  for material creation
* Fix issues with reference gathering with payloads, PrimHandler has now
  payloads attribute
* Apply a material is now by default "stronger than descendants" that means this material
    will be rendered priority over materials already bind on descendant objects. Can be
    turned False `material.assign_to_objects(... , stronger_than_descendants=False)`
* Add 2d transform support when creating materials
    - `uvscale`, `uvtranslation`, `uvrotation` inputs can be directly modify
        by PrimHandler attribute `my_material.inputs.uvscale = (2.0, 2.0, 2.0)`
    - or by using `scale`, `rotate`, translate` from `material` module
        `material.scale(my_material, (2.0, 2.0, 2.0))`
* Remove material assignation with `material.remove_material_assignation(objects, recursive=True)`
    recursive remove assignation also on descendants.
* Fix `transform.get_world_transform` now return a correct tuple for translation, rotation and scale


0.4.0 (Mars 8th 2023)
+++++++++++++++++++++
* Usd is now 23.02
* Updated OpenImageIO to 2.4.8.1
* Numerous plugins updates and fixes
* Add ASM implementation into material creation
* Support input values for material creation
* OpenGL free Hydra implementation for Eclair
* Improve warning feedbacks
* Fix `transform.get_world_transform`
* Substance3d API python wheels are available
* Add `utility.calculate_bbox_midpoint`
* Add `.tree()` function for PrimHandlers and StageHandlers to print a hierarchy tree
* SBSAR material inputs are now editable, ex: `my_sbsar.procedural_sbsar.color = (0.2, 0.4, 0.8)`
* By default, material assignation takes over the descendants if they already have a material
* Scale now multiplies, `transform.scale(my_obj, (2,2,2))` multiplies the current scale by the given one
* Add `*=` operator to `Transformer`, `Transformer(my_obj).scale *= (2,2,2)`
* Add a new `variant` module to easily create variants
* Add a new `branch` module into `scene` to create parallel scene modifications in a non-destructive way
* Numerous minor fixes
